setwd("~/Google Drive/Courses/INFO 201/Assignments/My-Major")
shiny::runApp()
percentileFormat(1100) %>%
;
runApp()
runApp()
distributionGraph <- function(df, code){
df %>%
percentileFormat(code) %>%
ggplot(aes(x = Salaries, y = percentage, color = Major)) +
geom_point(size = 3) +
geom_smooth(method = 'loess')
}
percentileFormat <- function(df, code){
df %>%
filter(Major_code %in% code) %>%
select(Major_code, Major, P25th, Median, P75th) %>%
gather(key = Name, value = Salaries, P25th, Median, P75th) %>%
arrange(Major_code, Salaries) %>%
mutate(percentile = rep(c(25, 50, 75),times = length(code)),
percentage = rep(c(25, 50, 25),times = length(code)),
accumulate_percent = rep(c(75, 50, 25),times = length(code))
)
}
ggplotly(distributionGraph(df3, c(1501, 1100)))
df3 <- read.csv('data/all-ages.csv')
ggplotly(distributionGraph(df3, c(1501, 1100)))
warnings()
p <- distributionGraph(df3, c(1501, 1100))
ggplotly(p)
p <- distributionGraph(df3, c(1501))
ggplotly(p)
percentileFormat <- function(df, code){
df %>%
filter(Major_code %in% code) %>%
select(Major_code, Major, P25, P50, P75) %>%
gather(key = Percentile, value = Salaries, P25, P50, P75) %>%
arrange(Major_code, Salaries) %>%
mutate(percentile = rep(c(25, 50, 75),times = length(code)),
percentage = rep(c(25, 50, 25),times = length(code)),
accumulate_percent = rep(c(75, 50, 25),times = length(code))
)
}
distributionGraph <- function(df, code){
df %>%
percentileFormat(code) %>%
ggplot(aes(x = Salaries, y = percentage, color = Major)) +
geom_point(size = 3) +
geom_smooth()
}
p <- distributionGraph(df3, c(1501))
percentileFormat <- function(df, code){
df %>%
filter(Major_code %in% code) %>%
select(Major_code, Major, "P25th", "Median", "P75th") %>%
gather(key = Name, value = Salaries, "P25th", "Median", "P75th") %>%
arrange(Major_code, Salaries) %>%
mutate(percentile = rep(c(25, 50, 75),times = length(code)),
percentage = rep(c(25, 50, 25),times = length(code)),
accumulate_percent = rep(c(75, 50, 25),times = length(code))
)
}
distributionGraph <- function(df, code){
df %>%
percentileFormat(code) %>%
ggplot(aes(x = Salaries, y = percentage, color = Major)) +
geom_point(size = 3) +
geom_smooth(method = 'loess')
}
p <- distributionGraph(df3, c(1501))
df3
names(df3)
df3 <- read.csv('data/all-ages.csv')
colnames(df3) <- c("Major_code", "Major", "Major_category", "Total", "Employed",
"Employed_full_time_year_round", "Unemployed", "Unemployment_rate",
"P50", "P25", "P75")
percentileFormat <- function(df, code){
df %>%
filter(Major_code %in% code) %>%
select(Major_code, Major, P25, P50, P75) %>%
gather(key = Percentile, value = Salaries, P25, P50, P75) %>%
arrange(Major_code, Salaries) %>%
mutate(percentile = rep(c(25, 50, 75),times = length(code)),
percentage = rep(c(25, 50, 25),times = length(code)),
accumulate_percent = rep(c(75, 50, 25),times = length(code))
)
}
distributionGraph <- function(df, code){
df %>%
percentileFormat(code) %>%
ggplot(aes(x = Salaries, y = percentage, color = Major)) +
geom_point(size = 3) +
geom_smooth()
}
p <- distributionGraph(df3, c(1501))
ggplotly(p)
runApp()
min(df3$Major_code)
library(shiny)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(shinyjs)
df3 <- read.csv('data/all-ages.csv')
# colnames(df3) <- c("Major_code", "Major", "Major_category", "Total", "Employed",
#                    "Employed_full_time_year_round", "Unemployed", "Unemployment_rate",
#                    "P50", "P25", "P75")
major_index_list <- structure(as.list.data.frame(df3$Major_code),
names = as.character(df3$Major))
updateSelectizeInput(session, 'C3_Major_Selected', choices =
major_index_list, selected = '1100')
percentileFormat <- function(df, code){
df %>%
filter(Major_code %in% code) %>%
select(Major_code, Major, P25th, Median, P75th) %>%
gather(key = Name, value = Salaries, P25th, Median, P75th) %>%
arrange(Major_code, Salaries) %>%
mutate(percentile = rep(c(25, 50, 75),times = length(code)),
percentage = rep(c(25, 50, 25),times = length(code)),
accumulate_percent = rep(c(75, 50, 25),times = length(code))
)
}
distributionGraph <- function(df, code){
df %>%
percentileFormat(code) %>%
ggplot(aes(x = Salaries, y = percentage, color = Major)) +
geom_point(size = 3) +
geom_smooth(method = 'loess') +
xlim(min(Salaries), max(Salaries)) +
ylim(min(percentage), max(percentage))
}
output$chart3 <- renderPlotly({
print(
ggplotly(
distributionGraph(df3, input$C3_Major_Selected)
)
)
})
stackGraph <- function(df, code){
df %>%
arrange(P25th) %>%
mutate(P25th_50 = Median - P25th, Median_75 = P75th-Median) %>%
plot_ly(x = ~Major, y = ~P25th, type = 'bar', name = '25th Percentile') %>%
add_trace(y = ~P25th_50, name = '50th Percentile') %>%
add_trace(y = ~Median_75, name = '75th Percentile') %>%
layout(yaxis = list(title = 'Count'), barmode = 'stack')
}
# ggplotly(distributionGraph(df3, c(1100,1501, 1101)))
# ggplotly(stackGraph(df3, c(1100,1501, 1101)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df.all <- read.csv('data/all-ages.csv')
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
library(shiny)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
df3 <- read.csv('data/all-ages.csv')
# colnames(df3) <- c("Major_code", "Major", "Major_category", "Total", "Employed",
#                    "Employed_full_time_year_round", "Unemployed", "Unemployment_rate",
#                    "P50", "P25", "P75")
text.select.major('C3.major.selected', '1100')
percentileFormat <- function(df, code){
df %>%
filter(Major_code %in% code) %>%
select(Major_code, Major, P25th, Median, P75th) %>%
gather(key = Name, value = Salaries, P25th, Median, P75th) %>%
arrange(Major_code, Salaries) %>%
mutate(percentile = rep(c(25, 50, 75),times = length(code)),
percentage = rep(c(25, 50, 25),times = length(code)),
accumulate_percent = rep(c(75, 50, 25),times = length(code))
)
}
distributionGraph <- function(df, code){
df %>%
percentileFormat(code) %>%
ggplot(aes(x = Salaries, y = percentage, color = Major)) +
geom_point(size = 3) +
geom_smooth(method = 'loess') +
theme(legend.position = "bottom", legend.box = "horizontal")
}
output$chart3 <- renderPlotly({
ggplotly(
distributionGraph(df3, input$C3.major.selected)
)
})
# stackGraph <- function(df, code){
#   df %>%
#     arrange(P25th) %>%
#     mutate(P25th_50 = Median - P25th, Median_75 = P75th-Median) %>%
#     plot_ly(x = ~Major, y = ~P25th, type = 'bar', name = '25th Percentile') %>%
#     add_trace(y = ~P25th_50, name = '50th Percentile') %>%
#     add_trace(y = ~Median_75, name = '75th Percentile') %>%
#     layout(yaxis = list(title = 'Count'), barmode = 'stack')
# }
# ggplotly(distributionGraph(df3, c(1100,1501, 1101)))
# ggplotly(stackGraph(df3, c(1100,1501, 1101)))
runApp()
# colnames(df3) <- c("Major_code", "Major", "Major_category", "Total", "Employed",
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(aes(x = Salaries, y = percentage, color = Major, mode = "lines")) +
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
layout(showlegend = FALSE)
runApp()
runApp()
shiny::runApp()
install.packages('tidyverse')
runApp()
runApp()
runApp()
buildPie <- function(df, major) {
selected <- df[df$Major == major,]
colors <- c('rgb(211,94,96)', 'rgb(114,147,203)')
label <- c("Women", "Men")
totals <- c(selected$Women, selected$Men)
df <- data.frame(label, totals)
p <- plot_ly(df, labels = ~label, values = ~totals, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(totals),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)), showlegend = FALSE) %>%
layout(title = 'Breakdown of Recent Graduates by Gender',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
return(p)
}
my.data <- read.csv('data/recent-grads.csv')
by.major <- my.data[,2:9]
View(by.major)
buildPie(by.major, 'ACCOUNTING')
df <- by.major
major <- 'ACCOUNTING'
selected <- df[df$Major == major,]
colors <- c('rgb(211,94,96)', 'rgb(114,147,203)')
label <- c("Women", "Men")
totals <- c(selected$Women, selected$Men)
df <- data.frame(label, totals)
p <- plot_ly(df, labels = ~label, values = ~totals, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(totals),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)), showlegend = FALSE) %>%
layout(title = 'Breakdown of Recent Graduates by Gender',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
return(p)
View(selected)
View(selected)
runApp()
source("scripts/library.R",  local = TRUE)$value
source("scripts/chart1.R",  local = TRUE)$value
source("scripts/chart2.R",  local = TRUE)$value
source("scripts/chart3.R",  local = TRUE)$value
runApp()
runApp()
runApp()
summarise(df3$Major_category)
summarise_(df3$Major_category)
summarise(as.list(df3$Major_category)
)
summarise(as.list(df3$Major_category))
summarise(as.character(df3$Major_category))
unique(df3$Major_category)
category_index_list <- df3 %>%
select(Major_category) %>%
unique()
category_index_list <- df.all %>%
select(Major_category) %>%
unique() %>%
as.list.data.frame()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- df.all
selectInput('Category_Selected', 'Major Category', selectize=TRUE, choices = NULL)
runApp()
runApp()
selectizeInput('Category_Selected', 'Major Category', choices = NULL, multiple = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
group.select.major
runApp()
runApp()
df.all <- read.csv('data/all-ages.csv')
runApp()
runApp()
runApp()
select.category <- function(df, out.variable, default.selected) {
category_index_list <- df %>%
select(Major_category) %>%
unique() %>%
as.list.data.frame()
updateSelectizeInput(session, out.variable ,
choices = category_index_list, selected = default.selected)
}
# Updates the "Selectize Input" and returns selected values
# text.select.major(string of the output variable name, selected major code)
# i.e. text.select.major(df,'C3_Major_Selected', '1100')
text.select.major <- function(df, out.variable, default.selected) {
major_index_list <- structure(as.list.data.frame(df.all$Major_code),
names = as.character(df.all$Major))
updateSelectizeInput(session, out.variable , choices =
major_index_list, selected = ~default.selected)
}
group.select.major <- function(df) {
select.category(df,'C3_Category_Selected','Agriculture & Natural Resources')
df.filtered <- df %>%
filter(Major_category %in% output@C3_Category_Selected)
text.select.major(df.filtered,'C3_Major_Selected', '1100')
}
runApp()
runApp()
category_index_list <- df.all %>%
select(Major_category) %>%
unique() %>%
as.list.data.frame()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Google Drive/Courses/INFO 201/Classwork/m15-special-topics/exercise-2")
# Introductory example using the housing data used here:
# http://www.r2d3.us/visual-intro-to-machine-learning-part-1/
library(rpart)
library(rpart.plot)
# Read in data
setwd('~/Documents/info-201/m15-special-topics/exercise-2')
homes <- read.csv('data/housing-data.csv')
# Function to compare values
AssessFit <- function(model, data = homes, outcome = 'in_sf') {
predicted <- predict(model, data, type='class')
accuracy <- length(which(data[,outcome] == predicted)) / length(predicted) * 100
return(accuracy)
}
# Assess fit for different models
# Use rpart to fit a model: predict `in_sf` using all other variables
basic.fit <- rpart(in_sf ~ ., data = homes, method="class")
# How well did we do?
AssessFit(basic.fit)
# Create empty vectors to store results
basic.fits <- vector()
perfect.fits <- vector()
# Sample size for training dataset
sample.size <- floor(.75 * nrow(homes))
for(i in 1:100) {
# Create test and training data
# Hint: http://stackoverflow.com/questions/17200114/how-to-split-data-into-training-testing-sets-using-sample-function-in-r-program
# 1. Create training and testing datasets by sampling 75% of your data from your `homes` dataframe.
# 2. Pass your **training data** to the `rpart` function to run a simple classification operation
# 3. Pass your results to the `AssessFit` function to assess the fit
# 4. Store your assessment in the `basic.fits` vector
}
# 5. Make a histogram of your `basic.fits` vector
# 6. Take the mean of your `basic.fits` vector
# 7. Pass your most recent model to the `rpart.plot` function to graph it
setwd("~/Google Drive/Courses/INFO 201/Assignments/My-Major")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Google Drive/Courses/INFO 201/Assignments/Test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
df <- data.frame(
A = c('A1', 'A1', 'A2',  'A2'),
B = c('B1', 'B2', 'B3', 'B4'),
stringsAsFactors = FALSE
)
# Shiny UI
ui <- fluidPage(
selectInput('sel1', 'A', choices = NULL,
selected = NULL,
selectize = FALSE)
, selectInput('sel2', 'B', choices = NULL,
selected = NULL,
selectize = FALSE)
, actionButton('clickme',  'Click me')
)
server <- function(input, output, session) {
choice <- NULL
observe({
df_a <- unique(df$A)
updateSelectInput(session, 'sel1', choices = df_a, selected = NULL)
})
observe({
req(input$sel1)
df_b <- df[df$A == input$sel1,]
df_b <- unique(df_b$B)
updateSelectInput(session, 'sel2', choices = df_b, selected = choice)
choice <<- NULL
})
observe({
req(input$clickme)
updateSelectInput(session, 'sel1', selected = 'A2')
choice <<- "B4"
# build the set of current sel2-choices
df_b <- df[df$A == isolate(input$sel1),]
df_b <- unique(df_b$B)
if(choice %in% df_b){
updateSelectInput(session, 'sel2', choices = df_b, selected = choice)
}
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Google Drive/Courses/INFO 201/Assignments/Test')
runApp('~/Google Drive/Courses/INFO 201/Assignments/Test')
source('~/Google Drive/Courses/INFO 201/Assignments/My-Major/scripts/chart1.R')
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
actionButton("hideshow", "Hide/show plot"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(rnorm(100))
})
observeEvent(input$hideshow, {
# every time the button is pressed, alternate between hiding and showing the plot
toggle("plot")
})
}
shinyApp(ui = ui, server = server)
runApp('~/Google Drive/Courses/INFO 201/Assignments/Test')
runApp()
runApp()
runApp()
runApp()
