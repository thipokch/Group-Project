# Exercise 2: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
install.packages('dplyr')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
library(dplyr)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles.1997.2 <- filter(vehicles, year == 1997)
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
# Of those vehicles, what is the vehicle ID of the vehicle with the worst hwy mpg?
# Write a function that takes a `year` and a `make` as parameters, and returns
# The vehicle that gets the most hwy miles/gallon of vehicles of that make in that year
# What was the most efficient honda model of 1995?
# Exercise 2: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
install.packages('dplyr')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
library(dplyr)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles.1997.2 <- filter(vehicles, year == 1997)
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
# Of those vehicles, what is the vehicle ID of the vehicle with the worst hwy mpg?
# Write a function that takes a `year` and a `make` as parameters, and returns
# The vehicle that gets the most hwy miles/gallon of vehicles of that make in that year
# What was the most efficient honda model of 1995?
vehicles.1997.2 <- filter(vehicles, year == 1997)
View(vehicles.1997)
# Exercise 2: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
install.packages('dplyr')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
library(dplyr)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles.1997.2 <- filter(vehicles, year == 1997)
install.packages("devtools")
install.packages("devtools")
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles.1997.2 <- filter(vehicles, year == 1997)
# Exercise 2: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
install.packages('dplyr')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
library(dplyr)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles.1997.2 <- filter(vehicles, year == 1997)
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
# Of those vehicles, what is the vehicle ID of the vehicle with the worst hwy mpg?
# Write a function that takes a `year` and a `make` as parameters, and returns
# The vehicle that gets the most hwy miles/gallon of vehicles of that make in that year
# What was the most efficient honda model of 1995?
vehicles <- filter(vehicles, year == 1997)
View(vehicles.1997)
vehicles.1997.2 <- filter(vehicles, year == 1997)
View(vehicles)
View(vehicles.1997.2)
unique(vehicles.1997.2)
unique(vehicles.1997.2$year)
two.wheel.20.miles <- filter(vehicles, drive == '2-Wheel Drive' & cty > 20)
View(two.wheel)
View(two.wheel.20.miles)
library(fueleconomy)
library(dplyr)
# You should have have access to the `vehicles` data.frame
View(vehicles)
vehicles.1997.2 <- filter(vehicles, year == 1997)
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles.1997.2$year)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
two.wheel.20.miles <- filter(vehicles, drive == '2-Wheel Drive' & cty > 20)
# Exercise 2: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
install.packages('dplyr')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
library(dplyr)
# You should have have access to the `vehicles` data.frame
View(vehicles)
# Create a data.frame of vehicles from 1997
vehicles.1997 <- filter(vehicles, year == 1997)
# Use the `unique` function to verify that there is only 1 value in the `year` column of your new data.frame
unique(vehicles.1997$year)
# Create a data.frame of 2-Wheel Drive vehicles that get more than 20 miles/gallon in the city
two.wheel.20.miles <- filter(vehicles, drive == '2-Wheel Drive' & cty > 20)
# Of those vehicles, what is the vehicle ID of the vehicle with the worst hwy mpg?
worst.hwy.mpg <- two.wheel.20.miles[two.wheel.20.miles$hwy == min(two.wheel.20.miles$hwy), 'id']
# Write a function that takes a `year` and a `make` as parameters, and returns
# The vehicle that gets the most hwy miles/gallon of vehicles of that make in that year
# What was the most efficient honda model of 1995?
install.packages("devtools")
View(vehicles)
# Exercise 3: Data Frame Practice with `dplyr`.
# Use a different appraoch to accomplish the same tasks as exercise-1
# Install devtools package: allows installations from GitHub
install.packages('devtools')
install.packages("devtools")
install.packages('dplyr')
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
library(dplyr)
View(vehicles)
# Which Accura model has the best hwy MPG in 2015? (without method chaining)
acuras <- vehicles[vehicles$make == 'Acura',]
acuras.2015 <- acuras[acuras$year == 2015,]
acura.highest.hwy.2015 <- acuras.2015[acuras.2015$hwy == max(acuras.2015$hwy), 'model']
View(acuras)
View(acuras.2015)
View(acura.highest.hwy.2015)
# Which Accura model has the best hwy MPG in 2015? (pipe operator)
acura.highest.hwy.2015.pipe <- filter(vehicles, make == 'Acura') %>%
filter(year == 2015) %>%
select(hwy == max(hwy))
# Which Accura model has the best hwy MPG in 2015? (pipe operator)
acura.highest.hwy.2015.pipe <- filter(vehicles, make == 'Acura') %>%
filter(year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
View(acura.highest.hwy.2015)
View(acura.highest.hwy.2015.pipe)
# Install devtools package: allows installations from GitHub
# Install "fueleconomy" package from GitHub
devtools::install_github("hadley/fueleconomy")
# Require/library the fueleconomy package
library(fueleconomy)
library(dplyr)
View(vehicles)
# Which Accura model has the best hwy MPG in 2015? (without method chaining)
acuras <- vehicles[vehicles$make == 'Acura',]
acuras.2015 <- acuras[acuras$year == 2015,]
acura.highest.hwy.2015 <- acuras.2015[acuras.2015$hwy == max(acuras.2015$hwy), 'model']
# Which Accura model has the best hwy MPG in 2015? (nesting functions)
# Which Accura model has the best hwy MPG in 2015? (pipe operator)
acura.highest.hwy.2015.pipe <- filter(vehicles, make == 'Acura') %>%
filter(year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
View(acura.highest.hwy.2015)
View(acura.highest.hwy.2015.pipe)
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data.frame flights should now be accessible to you.  View it,
# and get some basic information about the number of rows/columns
View(flights)
num.rows <- nrow(flights)
num.col <- ncol(flights)
# Add a column that is the amount of time gained in the air (`arr_delay` - `dep_delay`)
flights <- mutate(flights, time.gained = arr_delay - dep_delay)
library(nycflights13)
library(dplyr)
# The data.frame flights should now be accessible to you.  View it,
# and get some basic information about the number of rows/columns
View(flights)
num.rows <- nrow(flights)
num.col <- ncol(flights)
# Add a column that is the amount of time gained in the air (`arr_delay` - `dep_delay`)
flights <- mutate(flights, time.gained = arr_delay - dep_delay)
# Sort your data.frame desceding by the column you just created
flights <- arrange(flights, -time.gained)
# Try doing the last 2 steps in a single operation using the pipe operator
flights <- mutate(flights, time.gained = arr_delay - dep_delay) %>%
arrange(-time.gained)
# Make a histogram of the amount of gain using the `hist` command
hist(flights, time.gained)
# Make a histogram of the amount of gain using the `hist` command
hist(time.gained)
# Add a column that is the amount of time gained in the air (`arr_delay` - `dep_delay`)
flights <- mutate(flights, time.gained = (arr_delay - dep_delay))
# Sort your data.frame desceding by the column you just created
flights <- arrange(flights, -time.gained)
# Try doing the last 2 steps in a single operation using the pipe operator
flights <- mutate(flights, time.gained = arr_delay - dep_delay) %>%
arrange(-time.gained)
# Make a histogram of the amount of gain using the `hist` command
hist(time.gained)
# Make a histogram of the amount of gain using the `hist` command
hist(flights, time.gained)
# Make a histogram of the amount of gain using the `hist` command
hist(flights$time.gained)
# On average, did flights gain or lose time?
average <- mean(select(flights, time.gained))
# On average, did flights gain or lose time?
average <- mean(flights$time.gained)
# On average, did flights gain or lose time?
average <- mean(flights$time.gained, na.rm = TRUE)
# Create a data.frame that is of flights headed to seatac ('SEA'),
seatac.flights <- data.frame(filter(flights, dest == 'SEA'))
# On average, did flights to seatac gain or loose time?
average.seatac <- mean(seatac.flights$time.gained, na.rm = TRUE)
library(nycflights13)
library(dplyr)
View(flights)
month.largest.delay <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay))
View(month.largest.delay)
month.largest.delay <- group_by(flights, month) %>%
summarise(delay = mean(dep_delay))
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
month.largest.delay <- group_by(flights, month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
month.largest.delay <- group_by(flights, month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE))
plot(month.largest.delay)
# In which airport were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
airport.largest.delay <- group_by(flights, dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE))
View(airport.largest.delay)
### Bonus ###
# Which city was flown to with the highest average speed?
summarise(speed = mean(distance / air_time, na.rm = TRUE))
city.highest.speed <- group_by(flights, dest) %>%
# Which city was flown to with the highest average speed?
city.highest.speed <- group_by(flights, dest) %>%
summarise(speed = mean((distance / air_time), na.rm = TRUE))
### Bonus ###
# Which city was flown to with the highest average speed?
city.highest.speed <- group_by(flights, dest) %>%
summarise(speed = (mean(distance, na.rm = TRUE) / mean(air_time, na.rm = TRUE)))
View(city.highest.speed)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
month.largest.delay <- group_by(flights, month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
arrange(-delay)
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(month.largest.delay)
# In which airport were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
airport.largest.delay <- group_by(flights, dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE))
arrange(-delay)
### Bonus ###
# Which city was flown to with the highest average speed?
city.highest.speed <- group_by(flights, dest) %>%
summarise(speed = (mean(distance, na.rm = TRUE) / mean(air_time, na.rm = TRUE)))
arrange(-speed)
# In which month was the average departure delay the greatest?
# Hint: you'll have to perform a grouping operation before summarizing your data
month.largest.delay <- group_by(flights, month) %>%
summarise(delay = mean(dep_delay, na.rm = TRUE)) %>%
arrange(-delay)
# If you create a data.frame with the columns "month", and "delay" above, you should be able to create
# a scatterplot by passing it to the 'plot' function
plot(month.largest.delay)
# In which airport were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation before summarizing your data
airport.largest.delay <- group_by(flights, dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-delay)
### Bonus ###
# Which city was flown to with the highest average speed?
city.highest.speed <- group_by(flights, dest) %>%
summarise(speed = (mean(distance, na.rm = TRUE) / mean(air_time, na.rm = TRUE))) %>%
arrange(-speed)
View(city.highest.speed)
View(airport.largest.delay)
View(month.largest.delay)
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then use left_join
# to join on the "airports" dataframe, which has the airport info
ave.arrival.delay <- group_by(flights, dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE))
joined <- left_join(ave.arrival.delay, airports, by='dest')
ave.arrival.delay <- group_by(flights, dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE))
joined <- left_join(ave.arrival.delay, airports)
View(airport.largest.delay)
View(ave.arrival.delay)
View(airports)
View(flights)
ave.arrival.delay <- group_by(flights, dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE))
joined <- left_join(ave.arrival.delay, airports, by='1')
ave.arrival.delay <- group_by(flights, dest) %>%
summarise(delay = mean(arr_delay, na.rm = TRUE))
joined <- left_join(airports, ave.arrival.delay, by='faa')
# Create a dataframe of the average arrival delay for each destination, then use left_join
# to join on the "airports" dataframe, which has the airport info
ave.arrival.delay <- group_by(flights, dest) %>%
summarise(ave.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by='faa') %>%
arrange(-ave.delay)
# Create a dataframe of the average arrival delay for each airline, then use left_join
# to join on the "airlines" dataframe, which has the airline info
ave.arrivle.delay.airline <- flights %>% group_by(carrier) %>%
summarise(ave.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = carrier) %>%
left_join(airports, by='faa') %>%
arrange(-ave.delay)
View(ave.arrivle.delay.airline)
ave.arrival.delay.airline <- flights %>% group_by(carrier) %>%
summarise(ave.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = carrier) %>%
left_join(airports, by='faa') %>%
arrange(-ave.delay)
View(ave.arrivle.delay.airline)
View(ave.arrival.delay.airline)
# Create a dataframe of the average arrival delay for each airline, then use left_join
# to join on the "airlines" dataframe, which has the airline info
ave.arrival.delay.airline <- flights %>% group_by(carrier) %>%
summarise(ave.delay = mean(arr_delay, na.rm = TRUE)) %>%
left_join(airports, by='carrier') %>%
arrange(-ave.delay)
### Exercise 5 ###
library(jsonlite)
library(dplyr)
# Write a function that allows you to specify a movie, then does the following:
#MovieInfo <- function(movie) {
movie <- "Django Unchained"
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(" ", "+", movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
query <- paste0(base.url, "query=", movie.no.spaces)
# Request data using your search query
movie.data <- fromJSON(query)
### Exercise 5 ###
library(jsonlite)
library(dplyr)
# Write a function that allows you to specify a movie, then does the following:
MovieInfo <- function(movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(" ", "+", movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
api.key <- "&api-key=3ce08839a12b48e2bbe6331ff9154bbf"
query <- paste0(base.url, "query=", movie.no.spaces, api.key)
# Request data using your search query
movie.data <- fromJSON(query)
# What type of variable does this return?
# Flatten the data stored in the `$results` key of the data returned to you
flattened <- flatten(movie.data$results)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
first.review <- flattened[1,]
headline <- first.review$headline
summary <- first.review$summary_short
link <- first.review$link.url
# Return an list of the three pieces of information from above
info <- list(headline=headline, summary=summary, link=link)
return (info)
}
# Test that your function works with a movie of your choice
django.unchained.info <- MovieInfo("Django Unchained")
View(flattened)
### Exercise 5 ###
library(jsonlite)
library(dplyr)
# Write a function that allows you to specify a movie, then does the following:
MovieInfo <- function(movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(" ", "+", movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
api.key <- "&api-key=3ce08839a12b48e2bbe6331ff9154bbf"
query <- paste0(base.url, "query=", movie.no.spaces, api.key)
# Request data using your search query
movie.data <- fromJSON(query)
# What type of variable does this return?
# Flatten the data stored in the `$results` key of the data returned to you
flattened <- flatten(movie.data$results)
View(flattened)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
first.review <- flattened[1,]
headline <- first.review$headline
summary <- first.review$summary_short
link <- first.review$link.url
info <- list(headline=headline, summary=summary, link=link)
# Return an list of the three pieces of information from above
return (info)
}
# Test that your function works with a movie of your choice
django.unchained.info <- MovieInfo("Django Unchained")
query
### Exercise 5 ###
library(jsonlite)
library(dplyr)
# Write a function that allows you to specify a movie, then does the following:
GetMovieReview <- function(movie) {
# Replace all of the spaces in your movie title with plus signs (+)
movie.no.spaces <- gsub(" ", "+", movie)
# Construct a search query using YOUR api key
# The base URL is https://api.nytimes.com/svc/movies/v2/reviews/search.json?
# See the interactive console for more detail:https://developer.nytimes.com/movie_reviews_v2.json#/Console/GET/reviews/search.json
base.url <- "https://api.nytimes.com/svc/movies/v2/reviews/search.json?"
api.key <- "&api-key=3ce08839a12b48e2bbe6331ff9154bbf"
query <- paste0(base.url, "query=", movie.no.spaces, api.key)
# Request data using your search query
movie.data <- fromJSON(query)
# What type of variable does this return?
# Flatten the data stored in the `$results` key of the data returned to you
flattened <- flatten(movie.data$results)
View(flattened)
# From the most recent review, store the headline, short summary, and link to full article each in their own variables
first.review <- flattened[1,]
headline <- first.review$headline
summary <- first.review$summary_short
link <- first.review$link.url
# Return an list of the three pieces of information from above
info <- list(headline=headline, summary=summary, link=link)
return (info)
}
# Test that your function works with a movie of your choice
django.unchained.info <- GetMovieReview("Django Unchained")
setwd("~/INFO201/My-Major")
return(BuildJobQuality(data, input$discipline, input$text))
#})
# Test Server File for Chart 2
# Test Server File for Chart 2
library(plotly)
library(shiny)
library(rsconnect)
source('scripts/chart2.R')
data <- read.csv("data/recent-grads.csv", stringsAsFactors = FALSE)
View(data)
# Start shinyServer
shinyServer(function(input, output) {
# Renders a plotly object that returns my employment pie chart
output$pie <- renderPlotly({
return(BuildEmployment(data, input$discipline, input$text))
})
# Renders a plotly object that returns my job quality pie chart
output$pie <- renderPlotly({
return(BuildJobQuality(data, input$discipline, input$text))
})
})
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(bootstrapPage)
install.packages("bootstrapPage")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
